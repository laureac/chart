{"version":3,"sources":["component/Cards.js","component/Charts.js","App.js","serviceWorker.js","index.js"],"names":["Cards","useState","valueX","setValueX","valueY","setValueY","valueZ","setValueZ","date","setDate","urlFetchData","a","fetch","response","ok","json","jsonResponse","confirmed","value","recovered","deaths","lastUpdate","console","log","useEffect","className","start","end","duration","separator","Date","toDateString","Charts","dailyData","setdailyData","dataUpdate","map","dailyDatas","total","reportDate","lineChart","length","data","labels","datasets","label","borderColor","fill","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNA0EeA,MAtEf,WAAiB,IAAD,EACgBC,mBAAS,GADzB,mBACLC,EADK,KACGC,EADH,OAEgBF,mBAAS,GAFzB,mBAELG,EAFK,KAEGC,EAFH,OAGgBJ,mBAAS,GAHzB,mBAGLK,EAHK,KAGGC,EAHH,OAIYN,mBAAS,GAJrB,mBAILO,EAJK,KAICC,EAJD,KAMNC,EAAY,uCAAG,sCAAAC,EAAA,+GAGMC,MAHN,8CAGXC,EAHW,QAIJC,GAJI,iCAK8BD,EAASE,OALvC,OAKSC,EALT,OAMSC,EAAYD,EAAaC,UAAUC,MACnCC,EAAYH,EAAaG,UAAUD,MACnCE,EAASJ,EAAaI,OAAOF,MAC7BV,EAAOQ,EAAaK,WAC1BlB,EAAUc,GACVZ,EAAUc,GACVZ,EAAUa,GACVX,EAAQD,GAbX,0DAiBLc,QAAQC,IAAR,MAjBK,0DAAH,qDA0BlB,OALAC,qBAAU,WACNd,MACD,IAIC,oCACA,yBAAKe,UAAU,SACX,yBAAKA,UAAU,iBACX,qDACA,kBAAC,IAAD,CACIC,MAAQ,EACRC,IAAOzB,EACP0B,SAAW,IACXC,UAAU,OAGlB,yBAAKJ,UAAU,iBACX,oDACA,kBAAC,IAAD,CACIC,MAAQ,EACRC,IAAOvB,EACPwB,SAAW,EACXC,UAAU,OAGlB,yBAAKJ,UAAU,eACX,iDACA,kBAAC,IAAD,CACIC,MAAQ,EACRC,IAAOrB,EACPsB,SAAW,EACXC,UAAU,OAGlB,yBAAKJ,UAAU,UACX,6CAAsB,IAAIK,KAAKtB,GAAMuB,mB,gBCRtCC,MAtDf,WAAkB,IAAD,EACqB/B,mBAAS,IAD9B,mBACNgC,EADM,KACKC,EADL,KAGPxB,EAAY,uCAAG,gCAAAC,EAAA,qHAGMC,MAHN,oDAGXC,EAHW,QAIJC,GAJI,iCAK8BD,EAASE,OALvC,OAKSC,EALT,OAMSmB,EAAanB,EAAaoB,KAAI,SAACC,GAAD,MAAe,CAC/CpB,UAAWoB,EAAWpB,UAAUqB,MAChClB,OAAQiB,EAAWjB,OAAOkB,MAC1B9B,KAAM6B,EAAWE,eAErBL,EAAaC,GAXhB,0DAeLb,QAAQC,IAAR,MAfK,0DAAH,qDAmBlBC,qBAAU,WACNd,MACD,IAEH,IAAM8B,EACFP,EAAUQ,OACT,kBAAC,IAAD,CACGC,KAAO,CACHC,OAAQV,EAAUG,KAAI,qBAAG5B,QACzBoC,SAAU,CAAC,CACPF,KAAMT,EAAUG,KAAI,qBAAGnB,aACvB4B,MAAO,WACPC,YAAa,UACbC,MAAM,GACP,CACCL,KAAMT,EAAUG,KAAI,qBAAGhB,UACvByB,MAAO,SACPC,YAAa,mBACbE,gBAAiB,yBACjBD,MAAM,OAGZ,KAGV,OACI,yBAAKtB,UAAU,mBACVe,IC/BES,MAjBf,WACE,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,OACf,4CACA,kBAAC,EAAD,OAEA,yBAAKA,UAAU,WACb,+CACA,yBAAKA,UAAU,aACX,kBAAC,EAAD,UCJQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.256056ec.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport './cards.scss';\r\nimport CountUp from 'react-countup';\r\n\r\nfunction Cards(){\r\n    const [valueX, setValueX] = useState(0);\r\n    const [valueY, setValueY] = useState(0);\r\n    const [valueZ, setValueZ] = useState(0);\r\n    const [date, setDate] = useState(0);\r\n\r\n    const urlFetchData = async() =>{\r\n        const url = `https://covid19.mathdro.id/api`;\r\n        try {\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n                            const jsonResponse = await response.json();\r\n                            const confirmed = jsonResponse.confirmed.value;\r\n                            const recovered = jsonResponse.recovered.value;\r\n                            const deaths = jsonResponse.deaths.value;\r\n                            const date = jsonResponse.lastUpdate;\r\n                            setValueX(confirmed);\r\n                            setValueY(recovered);\r\n                            setValueZ(deaths);\r\n                            setDate(date);\r\n                        }\r\n        }\r\n        catch(err){\r\n                    console.log(err)\r\n                }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        urlFetchData();\r\n    }, [])\r\n\r\n\r\n    return(\r\n        <>\r\n        <div className='cards'>\r\n            <div className='block confirm'>\r\n                <h3>Number of confirmed  </h3>\r\n                <CountUp \r\n                    start ={0} \r\n                    end = {valueX}\r\n                    duration= {2.5}\r\n                    separator=','\r\n                /> \r\n            </div>\r\n            <div className='block recover'>\r\n                <h3>Number of recovered </h3> \r\n                <CountUp \r\n                    start ={0} \r\n                    end = {valueY}\r\n                    duration= {2}\r\n                    separator=','\r\n                />\r\n            </div>\r\n            <div className='block death'>\r\n                <h3>Number of deaths </h3>\r\n                <CountUp \r\n                    start ={0} \r\n                    end = {valueZ}\r\n                    duration= {1}\r\n                    separator=','\r\n                /> \r\n            </div>\r\n            <div className='update'>\r\n                <p>last update : </p>{new Date(date).toDateString()}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Cards;","import React, {useEffect, useState} from 'react';\r\nimport './charts.scss';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction Charts(){\r\n    const [dailyData, setdailyData] = useState([]);\r\n    \r\n    const urlFetchData = async() =>{\r\n        const url = `https://covid19.mathdro.id/api/daily`;\r\n        try {\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n                            const jsonResponse = await response.json();\r\n                            const dataUpdate = jsonResponse.map((dailyDatas)=>({\r\n                                confirmed: dailyDatas.confirmed.total,\r\n                                deaths: dailyDatas.deaths.total,\r\n                                date: dailyDatas.reportDate\r\n                            }))\r\n                            setdailyData(dataUpdate)\r\n                        }\r\n        }\r\n        catch(err){\r\n                    console.log(err)\r\n                }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        urlFetchData();\r\n    }, [])\r\n\r\n    const lineChart =(\r\n        dailyData.length ?\r\n        (<Line \r\n            data= {{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#f5b942',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'rgb(245, 66, 66)',\r\n                    backgroundColor: 'rgba(245, 66, 66, 0.5)',\r\n                    fill: true\r\n                }],\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n    return(\r\n        <div className='chart-container'>\r\n            {lineChart}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Charts;","import React from 'react';\nimport './App.scss';\nimport Cards from './component/Cards';\nimport Charts from './component/Charts';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='bar'>\n      <h2>Global Stats</h2>\n      <Cards />\n      </div>\n      <div className='display'>\n        <h1>COVID19 Tracker</h1>\n        <div className='dashboard'>\n            <Charts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}