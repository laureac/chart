{"version":3,"sources":["component/chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","useState","employeeSalary","setEmployeeSalary","employeeAge","setEmployeeAge","useEffect","empSal","empAge","axios","get","then","res","console","log","data","dataObj","push","parseInt","employee_salary","employee_age","labels","datasets","label","backgroundColor","options","legend","fontColor","catch","err","chart","className","fontSize","fontFamily","responsive","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","display","xAxes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gOA4IeA,MAvIf,WAAiB,IAAD,EACgCC,mBAAS,IADzC,mBACLC,EADK,KACWC,EADX,OAE0BF,mBAAS,IAFnC,mBAELG,EAFK,KAEQC,EAFR,KAqDR,OAJJC,qBAAU,YA7CI,WACV,IAAIC,EAAS,GACTC,EAAS,GACbC,IAAMC,IAAI,oDACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GADJ,oBAEcA,EAAIG,KAAKA,MAFvB,IAER,2BAAqC,CAAC,IAA3BC,EAA0B,QACjCT,EAAOU,KAAKC,SAASF,EAAQG,kBAC7BX,EAAOS,KAAKC,SAASF,EAAQI,gBAJzB,8BAMRjB,EAAkB,CACdkB,OAAQd,EACRe,SAAU,CACR,CACEC,MAAO,SACPR,KAAMR,EACNiB,gBAAiB,CAAC,sBAClBC,QAAS,CACLC,OAAQ,CACJL,OAAQ,CACJM,UAAW,eAO/BtB,EAAe,CACXgB,OAAQb,EACRc,SAAU,CACR,CACEC,MAAO,MACPR,KAAMP,EACNgB,gBAAiB,CAAC,4BAK7BI,OAAM,SAAAC,GACHhB,QAAQC,IAAIe,MAEhBhB,QAAQC,IAAIN,GACZK,QAAQC,IAAIP,GAIZuB,KACC,IAGD,oCACI,8CACA,yBAAKC,UAAU,aACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIhB,KAAMX,EACNqB,QAAS,CACLC,OAAQ,CACJL,OAAQ,CACHM,UAAW,QACXK,SAAU,GACVC,WAAY,6BAGrBC,YAAY,EACZC,OAAQ,CACRC,MAAO,CACH,CACIC,MAAO,CACHV,UAAW,QACXW,UAAU,EACdC,cAAe,GACfC,aAAa,GAEbC,UAAW,CACXC,SAAS,KAIrBC,MAAM,CACF,CACIN,MAAO,CACHV,UAAW,gBAO/B,yBAAKI,UAAU,aACX,kBAAC,IAAD,CACIhB,KAAMb,EACNuB,QAAS,CACLC,OAAQ,CACJL,OAAQ,CACHM,UAAW,QACXK,SAAU,GACVC,WAAY,6BAGrBC,YAAY,EACZC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHV,UAAW,QACXW,UAAU,EACdC,cAAe,GACfC,aAAa,GAEbC,UAAW,CACXC,SAAS,KAIrBC,MAAM,CACF,CACIN,MAAO,CACHV,UAAW,mBC7GpCiB,MAdf,WACE,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,OACf,uCADA,iBAIA,yBAAKA,UAAU,SACf,kBAAC,EAAD,SCAcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.ba5637b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport './chart.scss';\r\n\r\nfunction Chart(){\r\n    const [employeeSalary, setEmployeeSalary] = useState([]);\r\n    const [employeeAge, setEmployeeAge] = useState([]);\r\n\r\n    const chart = () => {\r\n        let empSal = [];\r\n        let empAge = [];\r\n        axios.get(\"http://dummy.restapiexample.com/api/v1/employees\")\r\n        .then(res =>{\r\n            console.log(res);\r\n            for (const dataObj of res.data.data) {\r\n                empSal.push(parseInt(dataObj.employee_salary));\r\n                empAge.push(parseInt(dataObj.employee_age));\r\n              }\r\n            setEmployeeSalary({\r\n                labels: empSal,\r\n                datasets: [\r\n                  {\r\n                    label: \"Salary\",\r\n                    data: empSal,\r\n                    backgroundColor: [\"rgb(145, 101, 255)\"],\r\n                    options: {\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: 'white'\r\n                            }\r\n                        }\r\n                    }\r\n                  }\r\n                ]\r\n            })\r\n            setEmployeeAge({\r\n                labels: empAge,\r\n                datasets: [\r\n                  {\r\n                    label: \"Age\",\r\n                    data: empAge,\r\n                    backgroundColor: [\"rgb(255, 210, 50)\"],\r\n                  }\r\n                ]\r\n            })\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        });\r\n        console.log(empAge);\r\n        console.log(empSal);\r\n        \r\n    }\r\n    useEffect(() => {\r\n        chart();\r\n      }, []);\r\n\r\n        return (\r\n        <>\r\n            <h1>Home dashboard</h1>\r\n            <div className='dashboard'>\r\n                <div className='container'>\r\n                    <Line \r\n                        data={employeeAge}\r\n                        options={{\r\n                            legend: {\r\n                                labels: {\r\n                                     fontColor: 'white',\r\n                                     fontSize: 20, \r\n                                     fontFamily: \"'Roboto Mono', monospace\", \r\n                                    }\r\n                                 },\r\n                            responsive: true,\r\n                            scales: {\r\n                            yAxes: [\r\n                                {\r\n                                    ticks: {\r\n                                        fontColor: 'white',\r\n                                        autoSkip: true,\r\n                                    maxTicksLimit: 10,\r\n                                    beginAtZero: true\r\n                                    },\r\n                                    gridLines: {\r\n                                    display: false\r\n                                    }\r\n                                }\r\n                            ],\r\n                        xAxes:[\r\n                            {\r\n                                ticks: {\r\n                                    fontColor: 'white',\r\n                            }\r\n                        }\r\n                        ]}\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className='container'>\r\n                    <Line\r\n                        data={employeeSalary}\r\n                        options={{\r\n                            legend: {\r\n                                labels: {\r\n                                     fontColor: 'white',\r\n                                     fontSize: 20, \r\n                                     fontFamily: \"'Roboto Mono', monospace\", \r\n                                    }\r\n                                 },\r\n                            responsive: true,\r\n                            scales: {\r\n                                yAxes: [\r\n                                    {\r\n                                        ticks: {\r\n                                            fontColor: 'white',\r\n                                            autoSkip: true,\r\n                                        maxTicksLimit: 10,\r\n                                        beginAtZero: true\r\n                                        },\r\n                                        gridLines: {\r\n                                        display: false\r\n                                        }\r\n                                    }\r\n                                ],\r\n                            xAxes:[\r\n                                {\r\n                                    ticks: {\r\n                                        fontColor: 'white',\r\n                                }\r\n                            }\r\n                            ]}\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n        );\r\n    \r\n}\r\n\r\nexport default Chart;","import React from 'react';\nimport './App.css';\nimport Chart from './component/chart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='bar'>\n      <h2>Welcome</h2>\n      Team Overview\n      </div>\n      <div className='chart'>\n      <Chart />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}